// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated on Tue, 23 Jan 2018 19:03:27 IST.
// By https://git.io/c-for-go. DO NOT EDIT.

package vad

/*
#include "webrtc_vad.h"
#include "typedefs.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"sync"
	"unsafe"
)

// Ref returns a reference to C object as it is.
func (x *VadInst) Ref() *C.VadInst {
	if x == nil {
		return nil
	}
	return (*C.VadInst)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *VadInst) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewVadInstRef converts the C object reference into a raw struct reference without wrapping.
func NewVadInstRef(ref unsafe.Pointer) *VadInst {
	return (*VadInst)(ref)
}

// NewVadInst allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewVadInst() *VadInst {
	return (*VadInst)(allocVadInstMemory(1))
}

// allocVadInstMemory allocates memory for type C.VadInst in C.
// The caller is responsible for freeing the this memory via C.free.
func allocVadInstMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfVadInstValue))
	if err != nil {
		panic("memory alloc error: " + err.Error())
	}
	return mem
}

const sizeOfVadInstValue = unsafe.Sizeof([1]C.VadInst{})

// cgoAllocMap stores pointers to C allocated memory for future reference.
type cgoAllocMap struct {
	mux sync.RWMutex
	m   map[unsafe.Pointer]struct{}
}

var cgoAllocsUnknown = new(cgoAllocMap)

func (a *cgoAllocMap) Add(ptr unsafe.Pointer) {
	a.mux.Lock()
	if a.m == nil {
		a.m = make(map[unsafe.Pointer]struct{})
	}
	a.m[ptr] = struct{}{}
	a.mux.Unlock()
}

func (a *cgoAllocMap) IsEmpty() bool {
	a.mux.RLock()
	isEmpty := len(a.m) == 0
	a.mux.RUnlock()
	return isEmpty
}

func (a *cgoAllocMap) Borrow(b *cgoAllocMap) {
	if b == nil || b.IsEmpty() {
		return
	}
	b.mux.Lock()
	a.mux.Lock()
	for ptr := range b.m {
		if a.m == nil {
			a.m = make(map[unsafe.Pointer]struct{})
		}
		a.m[ptr] = struct{}{}
		delete(b.m, ptr)
	}
	a.mux.Unlock()
	b.mux.Unlock()
}

func (a *cgoAllocMap) Free() {
	a.mux.Lock()
	for ptr := range a.m {
		C.free(ptr)
		delete(a.m, ptr)
	}
	a.mux.Unlock()
}

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *VadInst) PassRef() *C.VadInst {
	if x == nil {
		x = (*VadInst)(allocVadInstMemory(1))
	}
	return (*C.VadInst)(unsafe.Pointer(x))
}
