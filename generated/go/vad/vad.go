// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated on Tue, 23 Jan 2018 19:03:27 IST.
// By https://git.io/c-for-go. DO NOT EDIT.

package vad

/*
#include "webrtc_vad.h"
#include "typedefs.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import "unsafe"

// Create function as declared in include/webrtc_vad.h:30
func Create() *VadInst {
	__ret := C.WebRtcVad_Create()
	__v := *(**VadInst)(unsafe.Pointer(&__ret))
	return __v
}

// Free function as declared in include/webrtc_vad.h:35
func Free(handle *VadInst) {
	chandle, _ := (*C.VadInst)(unsafe.Pointer(handle)), cgoAllocsUnknown
	C.WebRtcVad_Free(chandle)
}

// Init function as declared in include/webrtc_vad.h:43
func Init(handle *VadInst) int32 {
	chandle, _ := (*C.VadInst)(unsafe.Pointer(handle)), cgoAllocsUnknown
	__ret := C.WebRtcVad_Init(chandle)
	__v := (int32)(__ret)
	return __v
}

// SetMode function as declared in include/webrtc_vad.h:56
func SetMode(handle *VadInst, mode int32) int32 {
	chandle, _ := (*C.VadInst)(unsafe.Pointer(handle)), cgoAllocsUnknown
	cmode, _ := (C.int)(mode), cgoAllocsUnknown
	__ret := C.WebRtcVad_set_mode(chandle, cmode)
	__v := (int32)(__ret)
	return __v
}

// Process function as declared in include/webrtc_vad.h:70
func Process(handle *VadInst, fs int32, audioFrame *int16, frameLength uint) int32 {
	chandle, _ := (*C.VadInst)(unsafe.Pointer(handle)), cgoAllocsUnknown
	cfs, _ := (C.int)(fs), cgoAllocsUnknown
	caudioFrame, _ := (*C.int16_t)(unsafe.Pointer(audioFrame)), cgoAllocsUnknown
	cframeLength, _ := (C.size_t)(frameLength), cgoAllocsUnknown
	__ret := C.WebRtcVad_Process(chandle, cfs, caudioFrame, cframeLength)
	__v := (int32)(__ret)
	return __v
}

// ValidRateAndFrameLength function as declared in include/webrtc_vad.h:80
func ValidRateAndFrameLength(rate int32, frameLength uint) int32 {
	crate, _ := (C.int)(rate), cgoAllocsUnknown
	cframeLength, _ := (C.size_t)(frameLength), cgoAllocsUnknown
	__ret := C.WebRtcVad_ValidRateAndFrameLength(crate, cframeLength)
	__v := (int32)(__ret)
	return __v
}
